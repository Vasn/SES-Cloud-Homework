name: Terraform Deployment S3

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      destroy:
        description: 'Destroy terraform infrastructure'
        required: false

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.3.4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        run: terraform init
        working-directory: terraform-deployment

      - name: Validate Terraform
        run: terraform validate
        working-directory: terraform-deployment

      - name: Check if S3 bucket exists
        id: check_bucket
        run: |
          bucket_name="website-bucket-1009"
          if aws s3api head-bucket --bucket $bucket_name 2>/dev/null; then
            echo "Bucket $bucket_name exists."
          else
            echo "Bucket $bucket_name does not exist."
            exit 0  # Exit with success, since bucket not found is expected
          fi

      - name: Terraform Apply
        if: ${{ steps.check_bucket.outputs.exists != 'true' }}
        run: terraform apply -auto-approve -input=false
        working-directory: terraform-deployment

      - name: Terraform Output
        run: terraform output
        working-directory: terraform-deployment

      - name: Upload website files to S3
        run: |
          aws s3 sync ../ s3://website-bucket-1009 --exclude "terraform-deployment/*" --exclude ".git/*" --exclude ".github/*" --exclude ".gitattributes" --exclude ".github/*" --exclude ".gitignore" --delete
        working-directory: terraform-deployment
        
      - name: Terraform Destroy
        if: github.event_name == 'delete' || github.event.inputs.destroy == 'true'
        run: terraform destroy -auto-approve
        working-directory: terraform-deployment
